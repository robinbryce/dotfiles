interpreter: bash -c
name: seal
usage: |
  conveniences for sealing secrets for bitnamis incluster sealed secrets controler

options:
  launchdir:
    usage: >
      Don't set this option. Its a work around for a go-tusk peculiarity
    environment: PWD
  cert:
    default: https://iona.thaumagen.io/_/sealed-secrets/v1/cert.pem
  certcmd:
    default: "curl -kso sealed-secrets.pem --header 'Host: hoy.polysensus.com' https://34.142.43.54/_/sealed-secrets/v1/cert.pem"
  quiet:
    type: bool
    short: q
  githost:
    default: github.com
  nodel:
    usage: "by default the local disc copy of the plaintext secret resource is deleted"
    type: bool
    default: false
    short: D

  reseal:
    usage: "skip generation and reseal. assumes --nodel was previousl used"
    type: bool
    default: false
    short: R

  force:
    default: false
    type: bool
    short: f

  name:
    default: default
  namespace:
    default: default

tasks:

  hoycert:
    usage: "get the sealer cert for the hoy polysensus cluster"
    run:
      - command:
          exec: |
            set -e
            # use the IP for now as the dns hasn't propagated
            curl -ks --header 'Host: hoy.polysensus.com' https://34.142.43.54/_/sealed-secrets/v1/cert.pem

  jsonfile:
    usage: "encapsulate entire json file as a secret"

    args:
      dir:
        usage: "the directory to put generated files in"
      jsonfile:

    run:
      - command:
          exec: |
            set -e
            DIR=$(cd ${launchdir} && cd ${dir} && pwd)
            [ ! -d $DIR ] && echo "$DIR doesn't exist" && exit 1

            JSONFILE=$(cd ${launchdir} && pwd)/${jsonfile}
            [ ! -f $JSONFILE ] && echo "$JSONFILE doesn't exist" && exit 1

            pushd $DIR > /dev/null

            [ ! -f ${JSONFILE} ] && echo "${JSONFILE} not found" && exit 1

            ${force} && rm -f kustomization.yaml
            [ -f kustomization.yaml ] && echo "kustomization.yaml exists in $DIR. Use -f if you mean to overwrite" && exit 1

            basefile=$(basename ${JSONFILE})

            if ! [ "${JSONFILE}" -ef "${basefile}" ]; then
              cp -v ${JSONFILE} ${basefile}
            fi

            cat <<END > kustomization.yaml
            generatorOptions:
              disableNameSuffixHash: true
            namespace: ${namespace}
            secretGenerator:
              - name: ${name}
                files:
                  - ${basefile}
            END

            [ -f kustomization.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/kustomization.yaml"

            kustomize build . > secret-${name}.yaml
            [ -f secret-${name}.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/secret-${name}.yaml"

            curl -kso sealed-secrets.pem ${cert}
            kubeseal --cert sealed-secrets.pem < secret-${name}.yaml  > secret-${name}sealed.yaml
            [ -f secret-${name}sealed.yaml ] && ! ${quiet} && echo "Wrote $(pwd)/secret-${name}sealed.yaml"

            rm -rf sealed-secrets.pem

            ! ${nodel} && rm secret-${name}.yaml && ! ${quiet} && echo "Deleted: secret-${name}.yaml"
            ! ${nodel} && rm kustomization.yaml && ! ${quiet} && echo "Deleted: kustomization.yaml"

            popd > /dev/null

  clientidsecret:
    usage: "generate a sealed secret containing an oauth2 style clientid and secret"
    options:
      clientid:
        usage: "A uuid4 is generated by default"
        default: ""
        short: i
      clientsecret:
        usage: "A 32 byte key is generated by default and represented as a base64 urlsafe string"
        default: ""
        short: s

    args:
      dir:
        usage: "the directory to put generated files in"
    run:
      - command:
          exec: |
            set -ex
            export SEALED_SECRETS_CONTROLLER_NAMESPACE=flux-system

            DIR=$(cd ${launchdir} && cd ${dir} && pwd)
            [ ! -d $DIR ] && echo "$DIR doesn't exist" && exit 1

            pushd $DIR > /dev/null

            ${force} && rm -f kustomization.yaml
            [ -f kustomization.yaml ] && echo "kustomization.yaml exists in $DIR. Use -f if you mean to overwrite" && exit 1

            # Creating the .env file makse reseal easier to implement. We
            # ususally need the secret in more than one namespace, which means
            # we typically need to seal it multiple times - once for each
            # namespace.
            if ! ${reseal}; then
            cat <<PYEND | python3  > clientidsecret.env
            import secrets, uuid
            id = "${clientid}"
            if not id:
              id = str(uuid.uuid4())
            key = "${clientsecret}"
            if not key:
              key = secrets.token_urlsafe(32)
            print(f"CLIENT_ID={id}")
            print(f"CLIENT_SECRET={key}""")
            PYEND
            fi

            cat <<END > kustomization.yaml
            generatorOptions:
              disableNameSuffixHash: true
            namespace: ${namespace}
            secretGenerator:
              - name: ${name}
                envs:
                  - clientidsecret.env
            END

            [ -f kustomization.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/kustomization.yaml"

            kustomize build . > secret-${name}.yaml
            [ -f secret-${name}.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/secret-${name}.yaml"

            curl -kso sealed-secrets.pem ${cert}
            kubeseal --cert sealed-secrets.pem < secret-${name}.yaml  > secret-${name}sealed.yaml
            [ -f secret-${name}sealed.yaml ] && ! ${quiet} && echo "Wrote $(pwd)/secret-${name}sealed.yaml"

            cat secret-${name}.yaml | yq e '.data["CLIENT_ID"]' - | base64 -d
            echo
            cat secret-${name}.yaml | yq e '.data["CLIENT_SECRET"]' - | base64 -d
            echo

            rm -rf sealed-secrets.pem

            ! ${nodel} && rm secret-${name}.yaml && ! ${quiet} && echo "Deleted: secret-${name}.yaml"
            ! ${nodel} && rm kustomization.yaml && ! ${quiet} && echo "Deleted: kustomization.yaml"

            popd > /dev/null

  git-deploykey:
    usage: "generate a new ssh key secret, suitable for use as a git deploy key, and seal it."
    args:
      dir:
        usage: "the directory to put generated files in"

    run:
      - command:
          exec: |
            set -ex
            export SEALED_SECRETS_CONTROLLER_NAMESPACE=flux-system

            DIR=$(cd ${launchdir} && cd ${dir} && pwd)
            [ ! -d $DIR ] && echo "$DIR doesn't exist" && exit 1

            pushd $DIR > /dev/null

            ${force} && rm -f kustomization.yaml
            [ -f kustomization.yaml ] && echo "kustomization.yaml exists in $DIR. Use -f if you mean to overwrite" && exit 1

            if ! ${reseal}; then
              rm -f ./identity
              rm -f ./known_hosts
              ssh-keygen -q -N "" -t ecdsa -f ./identity > /dev/null
              ssh-keyscan ${githost} > ./known_hosts
            fi

            cat <<EOF > kustomization.yaml
            generatorOptions:
              disableNameSuffixHash: true
            namespace: ${namespace}
            secretGenerator:
              - name: ${name}
                files:
                  - identity
                  - identity.pub
                  - known_hosts
            EOF
            [ -f kustomization.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/kustomization.yaml"

            kustomize build . > secret-${name}.yaml
            [ -f secret-${name}.yaml ] && ! ${quiet} echo "Wrote: $(pwd)/secret-${name}.yaml"

            curl -kso sealed-secrets.pem ${cert}
            kubeseal --cert sealed-secrets.pem < secret-${name}.yaml  > secret-${name}sealed.yaml
            [ -f secret-${name}sealed.yaml ] && ! ${quiet} && echo "Wrote $(pwd)/secret-${name}sealed.yaml"

            cat secret-${name}.yaml | yq e '.data["known_hosts"]' - | base64 -d
            cat secret-${name}.yaml | yq e '.data["identity.pub"]' - | base64 -d

            rm -rf sealed-secrets.pem

            ! ${nodel} && rm secret-${name}.yaml && ! ${quiet} && echo "Deleted: secret-${name}.yaml"
            ! ${nodel} && rm kustomization.yaml && ! ${quiet} && echo "Deleted: kustomization.yaml"

            popd > /dev/null

  secret:
    usage: seal a kubernetes secret
    options:
      cert:
        default: https://iona.thaumagen.io/_/sealed-secrets/v1/cert.pem
      cluster:
        default: "iona-1"
    args:
      secret:

    run:
      - command:
          exec: |
            set -e
            export SEALED_SECRETS_CONTROLLER_NAMESPACE=flux-system

            fullpath=$(cd ${launchdir} && pwd)/${secret}
            base=$(basename $fullpath)

            stem=${base%.*}
            ext=${base##*.}

            filedir=$(dirname $fullpath)
            outfile=${filedir}/${stem}sealed.${ext}

            curl -kso sealed-secrets.pem ${cert}

            kubeseal --cert sealed-secrets.pem < $fullpath  > $outfile

            [ -f $outfile ] && echo "Wrote $outfile"
