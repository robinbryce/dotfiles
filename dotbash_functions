tuf_usage() {
cat << EOF
tuf [TUF_OPTS] NAME [tusk-options-and-args]

Search a tuskile identified by <tusk-name> in all the directories identified
by TUSKDIRS and run it with the remaining $@ args

tusk -q -f MATCHED-TUSKFILE "$@"

MATCHED-TUSKFILE is selected as the first match in the directories identified
by the PATH like variable \$TUSKDIRS using the following rules (in priority
order)

NAME=<tusk-name>

1. \$NAME
2. \$NAME.yml
3. tusk-\$NAME
4. tusk-\${NAME}.yml
5. $NAME/tusk.yml  (allowing for the discovery of tusk.yml in directories identified by NAME)

TUF_OPTS
-h, --help, --help display this message
-l, --list         list all matches rather than executing first
--debug            show match diagnostics
EOF
}

tuf ()
{
	LIST=false
	DEBUG=false
	while true; do
		 case "$1" in
		 -h|--help)
		 	shift
		 	tuf_usage
			;;
		 -l|--list)
			shift
		 	echo "Listing (all) matches - only the first would be used"
			LIST=true
			;;
		 --debug)
			shift
		 	DEBUG=true
		 	;;
		 *)
		 	break
			;;
		esac
	done

	[ $# -eq 0 ] && tuf_usage && return 1
	export NAME=$1
	shift

	(
		TUSKDIRS=${TUSKDIRS:-~/.tuskfiles}

		TUSKFILES=${TUSKFILES:-~/.tuskfiles}

		for TUSKFILES in ${TUSKDIRS//:/ }; do
			for basename in $NAME $NAME.yml tusk-$NAME tusk-$NAME.yml $NAME/tusk.yml; do
				F=$TUSKFILES/$basename
				$DEBUG && echo $F
				if [[ -f $F ]]; then
					$DEBUG || $LIST && echo tusk -q -f $F "$@"
					! $LIST && exec tusk -q -f $F "$@" && return
				fi
			done
			$DEBUG echo "tusk name $NAME not found in $TUSKFILES"
		done
		! $LIST && echo "tusk file not found as any of $NAME $NAME.yml tusk-$NAME tusk-$NAME.yml"
		echo "in TUSKDIRS=$TUSKDIRS"
	)
}
