usage() {
TOOL=$1; shift
TOOL_OPTS="$1"; shift

cat << EOF
[OPTS] NAME [$TOOL-options-and-args]

Search for a ${TOOL} file in all the directories identified by TUSKDIRS and
run it with the remaining $@ args. (TUSKDIRS for both task and tusk)

$TOOL $TOOL_OPTS MATCHED-${TOOL^^}FILE "\$@"

Run with no other arguments to list all findable ${TOOL} files


Options:
-a, --list         list all matches rather than executing first
-D, --discover      show all considered files
-h, --help, --help display this message
EOF
}

findtoolverb () {

	list=$1 # show all matches rather that reporting and terminating for first
	discover=$2
	tool=$3
	verb=$4

	dirfile=${5:-Taskfile.yml}
	filepat=${6:-task-*.yml}
	[ -z "$verb" ] && discover=true # if no verb, always discover

	$discover && echo >&2 "LIST: $list, discover: $discover, TOOL: $tool, VERB: $verb"

	TUSKDIRS=${TUSKDIRS:-~/.tuskfiles}

	for TUSKFILES in ${TUSKDIRS//:/ }; do

		# list the directories on the path which contain files called dirfil first
		# typically Taskfile.yml or tusk.yml

		for dir in $TUSKFILES/*; do
			[ ! -d $dir ] && continue
			F=$dir/$dirfile
			# If we are listing all matches, show this match and continue
			if [[ -f $F ]] && [[ -n "$verb" ]] && [[ "$(basename $dir)" == "${verb}" ]]; then
				$LIST && echo "$dir/$dirfile" && continue
				echo "$dir/$dirfile" && return
			fi
			# If we are discover, show information about the file that didn't match the verb
			[ -f $F ] && $discover && >&2 echo "$tool $(basename $dir): $TUSKFILES $(basename $dir)/$dirfile" && continue
		done

		# Now list the files matching filepat on the path. Typicaly filepat is
		# task-*.yml or tusk-*.yml

		for m in $TUSKFILES/$filepat; do
			[ ! -f $m ] && continue
			base=$(basename $m)
			foundverb=${base#*-}
			! $LIST && [ -n "$verb" ] && [ "$verb" == "${foundverb%.*}" ] &&  echo $m && return
			[ -n "$verb" ] && [ "$verb" == "${foundverb%.*}" ] &&  echo "$m" && continue
			$discover && >&2 echo "$tool ${foundverb%.*} $TUSKFILES: $base" && continue
		done
	done
	$discover && >&2 echo "in TUSKDIRS=$TUSKDIRS"
	return 1
}

tuf() {
	tf tusk "-q -f" tusk.yml "tusk-*.yml" "$@"
}

taf() {
	# TODO: --dry support
	tf task "--silent -t" Taskfile.yml "task-*.yml" "$@"
}


tf ()
{
	TOOL="$1"; shift
	TOOL_OPTS="$1"; shift
	TOOLFILE_DEFAULT="$1"; shift
	TOOLFILE_PATTERN="$1"; shift

	NAME="-"
	LIST=false
	DISCOVER=false
	while true; do
		case "$1" in
			-h|--help)
			usage "$TOOL" "$TOOL_OPTS" "$TOOLFILE_DEFAULT" "$TOOLFILE_PATTERN"; return 0
			;;
			-a|--list)
			shift; LIST=true
			;;
			-D|--discover)
			shift; DISCOVER=true
		 	;;
			-*)
			usage "$TOOL" "$TOOL_OPTS" "$TOOLFILE_DEFAULT" "$TOOLFILE_PATTERN"; return 0
			;;
			*)
			break
			;;
		esac
	done


	if [ $# -gt 0 ]; then
		NAME=$1; shift
	else
		DISCOVER=true
	fi

	if $LIST || $DISCOVER; then
		findtoolverb $LIST $DISCOVER tusk $NAME "$TOOLFILE_DEFAULT" "$TOOLFILE_PATTERN"
		return $?
	fi

	MATCHED=$(findtoolverb false false tusk $NAME "$TOOLFILE_DEFAULT" "$TOOLFILE_PATTERN")
	if [ $? == 0 ]; then
		( exec $TOOL $TOOL_OPTS $MATCHED "$@" )
		return
	fi
	echo "findtool nothing found: $MATCHED"
}
