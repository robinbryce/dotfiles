tuf_usage() {
cat << EOF
tuf [TUF_OPTS] NAME [tusk-options-and-args]

Search a tuskile identified by <tusk-name> in all the directories identified
by TUSKDIRS and run it with the remaining $@ args

tusk -q -f MATCHED-TUSKFILE "$@"

Run `tuf' with no other arguments to list all findable tusk files

MATCHED-TUSKFILE is selected as the first match in the directories identified
by the PATH like variable \$TUSKDIRS using the following rules (in priority
order)

NAME=<tusk-name>

1. tusk-\${NAME}.yml
2. \$NAME/tusk.yml  (allowing for the discovery of tusk.yml in directories identified by NAME)

TUF_OPTS
-h, --help, --help display this message
-l, --list         list all matches rather than executing first
--debug            show match diagnostics
EOF
}

tal () {

	dirfile=${1:-Taskfile.yml}
	filepat=${2:-task-*.yml}
	cmd=${3:-""}
	verbose=false
	[ -n "$cmd" ] && verbose=true
	

	TUSKDIRS=${TUSKDIRS:-~/.tuskfiles}

	for TUSKFILES in ${TUSKDIRS//:/ }; do

		# list the directories on the path which contain files called dirfil first
		# typically Taskfile.yml or tusk.yml

		for dir in $TUSKFILES/*; do
			[ ! -d $dir ] && continue
			F=$dir/$dirfile
			[ -f $F ] && $verbose && echo "$cmd $(basename $dir): $TUSKFILES $(basename $dir)/$dirfile" && continue
			[ ! -f $F ] && continue
			$verbose && echo "$cmd $(basename $dir): $TUSKFILES $(basename $dir)/$dirfile" && continue
			echo $F
		done

		# Now list the files matching filepat on the path. Typicaly filepat is
		# task-*.yml or tusk-*.yml

		for m in $TUSKFILES/$filepat; do
			[ ! -f $m ] && continue
			base=$(basename $m)
			verb=${base#*-}
			$verbose && echo "$cmd ${verb%.*} $TUSKFILES: $base" && continue
			echo $F
		done
	done
	echo "in TUSKDIRS=$TUSKDIRS"
}

tuf ()
{
	LIST=false
	DEBUG=false
	while true; do
		case "$1" in
			-h|--help)
			shift
			tuf_usage && return 0
			;;
			-l|--list)
			shift
		 	echo "Listing (all) matches - only the first would be used"
			LIST=true
			;;
			-L|--list-all)
			tal "tusk.yml" "tusk-*.yml" tusk && return 0
			;;
			--debug)
			shift
		 	DEBUG=true
		 	;;
			*)
		 	break
			;;
		esac
	done

	[ $# -eq 0 ] && tal "tusk.yml" "tusk-*.yml" tusk && return 0
	export NAME=$1
	shift

	(
		TUSKDIRS=${TUSKDIRS:-~/.tuskfiles}

		for TUSKFILES in ${TUSKDIRS//:/ }; do
		  for dirbase in ./ $(ls -d $TUSKFILES/*/); do
				for basename in tusk-$NAME.yml $NAME/tusk.yml; do
					# F=$TUSKFILES/$basename
					F=${dirbase}${basename}
					$DEBUG && echo $F
					if [[ -f $F ]]; then
						$DEBUG || $LIST && echo tusk -q -f $F "$@"
						! $LIST && exec tusk -q -f $F "$@" && return
					fi
				done
			done
			$DEBUG echo "tusk name $NAME not found in $TUSKFILES"
		done
		! $LIST && echo "tusk file not found as any of tusk-$NAME.yml <TUSKDIR>/tusk.yml"
		echo "in TUSKDIRS=$TUSKDIRS"
	)
}

taf_usage() {
 echo as per tuf but for taskfiles. uses same directory path
}

taf ()
{
	LIST=false
	DEBUG=false
	while true; do
		case "$1" in
			-h|--help)
			shift
			taf_usage && return 0
			;;
			-l|--list)
			shift
		 	echo "Listing (all) matches - only the first would be used"
			LIST=true
			;;
			-L|--list-all)
			tal "Taskfile.yml" "task-*.yml" task && return 0
			;;
			--debug)
			shift
		 	DEBUG=true
		 	;;
			-D|--dry)
			shift
		 	DRY=true
			;;
			*)
		 	break
			;;
		esac
	done

	[ $# -eq 0 ] && tal "Taskfile.yml" "task-*.yml" task && return 0
	export NAME=$1
	shift

	(
		TUSKDIRS=${TUSKDIRS:-~/.tuskfiles}

		for TUSKFILES in ${TUSKDIRS//:/ }; do
			for basename in task-$NAME.yml $NAME/Taskfile.yml; do
				F=$TUSKFILES/$basename
				$DEBUG && echo $F
				if [[ -f $F ]]; then
					$DEBUG || $LIST && echo task ${DRY:+--dry} --silent -t $F "$@"
					! $LIST && exec task ${DRY:+--dry} --silent -t $F "$@" && return
				fi
			done
			$DEBUG echo "task name $NAME not found in $TUSKFILES"
		done
		! $LIST && echo "task file not found as any of task-$NAME.yml <TUSKDIR>/Taskfile.yml"
		echo "in TUSKDIRS=$TUSKDIRS"
	)
}
